import pygtrie


class Lexicon:
    def __init__(self):
        file = open("src/Game/fise-2.txt", "r")
        words = file.read().split("\n")
        self.trie = pygtrie.CharTrie()
        for word in words:
            self.trie[word] = True

    def validate(self, word: str) -> bool:
        return self.trie.has_key(word)


lexicon = Lexicon()

__letter_punctuacions = {
    "a": 1,
    "b": 3,
    "c": 3,
    "ch": 5,
    "d": 2,
    "e": 1,
    "f": 4,
    "g": 2,
    "h": 5,
    "i": 1,
    "j": 8,
    "l": 1,
    "ll": 8,
    "m": 3,
    "n": 1,
    "ñ": 8,
    "o": 1,
    "p": 3,
    "q": 5,
    "r": 1,
    "rr": 8,
    "s": 1,
    "t": 1,
    "u": 1,
    "v": 4,
    "x": 8,
    "y": 4,
    "z": 10,
}

letter_frecuencies = {
    "a": 12,
    "b": 2,
    "c": 4,
    "ch": 1,
    "d": 5,
    "e": 12,
    "f": 1,
    "g": 2,
    "h": 2,
    "i": 6,
    "j": 1,
    "l": 4,
    "ll": 1,
    "m": 2,
    "n": 5,
    "ñ": 1,
    "o": 9,
    "p": 2,
    "q": 1,
    "r": 5,
    "rr": 1,
    "s": 6,
    "t": 4,
    "u": 5,
    "v": 1,
    "x": 1,
    "y": 1,
    "z": 1,
}

multiplicators = [
    [
        (3, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (3, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (3, 1),
    ],
    [
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
    ],
    [
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
    ],
    [
        (1, 2),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 2),
    ],
    [
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
    ],
    [
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
    ],
    [
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
    ],
    [
        (3, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (3, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (3, 1),
    ],
    [
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
    ],
    [
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
    ],
    [
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 1),
    ],
    [
        (1, 2),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 2),
    ],
    [
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
    ],
    [
        (1, 1),
        (2, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 3),
        (1, 1),
        (1, 1),
        (1, 1),
        (2, 1),
        (1, 1),
    ],
    [
        (3, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (1, 1),
        (3, 1),
        (1, 1),
        (1, 1),
        (1, 1),
        (1, 2),
        (1, 1),
        (1, 1),
        (3, 1),
    ],
]


def letter_punctuations(tile: str):
    if tile.islower():
        return __letter_punctuacions[tile]
    return 0


def square_multiplicator(position: str):
    return multiplicators[int(position[1:]) - 1][ord(position[0]) - ord("a")]
